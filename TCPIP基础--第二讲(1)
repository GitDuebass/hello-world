上一讲算是数通的入门，给大家介绍了数通的一些基本概念，包括一个重要的只是模块，OSI七层模型，那么关于OSI基层模型呢实际上我个人觉得我们有必要去把七层模型的每一步都要记下来背下来，你要非常清楚的知道第一第二第三第四一直到第七，每一层他的名字是什么，以及他实现的主要功能是什么，那么从上一讲的介绍，大家都能够利用OSI七层模型来初步的分析一下我们数据交换的基本过程，当然没有办法做到非常深入，今天的课讲完了以后呢，希望大家都能熟练的掌握七层模型去深入的分析数据交互的过程，其实从上一讲的介绍我们会发现虽然说OSI七层模型定义的非常细，但是其实呢也定义得非常繁荣，尤其像是比如说上面三个层次应用层表示层会话层其实感觉上没有必要分得那么清楚，所以很多时候我们又会把上面三个层次合起来讲，称为系统层。所以算是由于种种原因吧使得OSI七层模型实际上没有得到一个广泛的应用。相反另外一个模型，叫做TCP/IP模型得到一个非常长足的发展，逐渐的形成了今天的IP网络的一个根本一个基础。那就是今天我们要介绍的TCP/IP模型、TCP/IP协议的一些相关知识，还有另外一个专题IP子网划分(VLSM)这样两个主题。当今我们整个IP网络的基础呢其实是一个TCP/IP模型，从历史的角度来讲呢他提出的时间要早于OSI模型，但是由于种种原因没有得到广泛的应用，但他的一些定义我们还在做深入的研究。那么另外一个模型呢也就是刚刚所讲的TCP/IP模型，我们也把它称为DOD模型。是由美国国防部去牵头开发的一个模型。应该说TCP/IP模型是当今我们整个网络的一个基础。那从这个图上大家能够看出来，DOD模型跟OSI七层模型之间其实是有一个对应关系的，OSI的上面三个层次就对应着DOD的应用层。传输层对应主机到主机层。网络层对应因特网层。数据链路层和物理层对应网络接入层，我的胶片中是将其拆分成了数据链路层和物理层。其实在TCP/IP模型中数据链路层和物理层合二为一啦叫网络接入层。在这里其实是为了在后面我方便做介绍。所以我们沿用OSI模型的这种阐述方式。这个大家做一个了解。说道TCP/IP模型呢就不得不说道TCP/IP簇或者叫协议栈。那么其实TCP/IP的整个协议体系当中呢是包含许许多多的体系，正是这些协议或者说这些标准呢他共同的工作才使得呢今天的整个因特网或者说整个IP网络他能够正常的工作。还能得到今天这样一个发展规模。所以TCP/IP协议簇里头其实包含了非常多的协议，只不过呢我们把当中的两个代表性的协议拿出来作为这个协议簇的命名。那就是TCP和IP。所以以后呢我们看到TCP和IP其实呢就代表了协议栈。里头呢包含了非常多的协议。那么他是由DOD美国国防部所牵头弄出来的一个需求，那么逐渐在后面得到一个长远的发展。最后形成了今天的一个IP网络的基础。TCP/IP参考模型的各个层次呢其实我们可以对照OSI模型当中的描述来来理解。比如说应用层还是TCP/IP的高层，那么他呢就是一些应用程序在这里工作的。比如说FTP/TELNET/DNS/SMTP等。再往下呢叫做主机到主机层。那么他呢就是提供一个端到端的功能。这里呢其实有两个协议，一个叫TCP、一个叫UDP。我们在后面会做详细的介绍。那么再往下呢就是因特网层，对应OSI七层模型里边的网络层。那么再因特网层不得不提到的协议呢就是IP。他呢定义了逻辑地址，定义了路由、定义了路劲选择的一个过程，定义了如何把分组作寻址，将分组从源端传到目的地去。一系列的这些东西呢。其实在介绍OSI，我们再来将这个，对于大家来讲呢理解起来应该不会很困难吧。相当于我们做一个知识回顾吧。下面两个层呢其实在TCP/IP模型中呢是被整合成一个啦，我再这里是为了方便讲解，所以呢我吧他做了一个区分。数据链路层和物理层呢也就不过多的去介绍了。接下来这张胶片呢就是工作在各个层次上的协议。比如说应用层呢有Telnet、ftp/tftp/snmp/http/smtp/nfs/dhcp这些应用程序。主机到主机层呢有TCP/UDP协议。网络层呢有ICMP、Routing Protocol、ip协议。二层呢有ARP/ETHERNET/FAST ETH局域网的封装，广域网的封装等等。那么应用层呢刚才讲过了，那么这里要强调几个我们常见的几个例子。比如说HTTP，包括他们对应的4层端口号80大家也要做个记忆。比如说知名（约定）端口号，使用http我们就能知道他的缺省端口号就是80.这个实际上是一个约定。约定端口，英文呢其实叫做well-known，是一种大家共同的约定。那么Telnet是一种仿真的远程登录协议。使用的端口号缺省23.还有FTP用来传输文件的一个程序，这个相信大家都知道。其实ftp开发了很多的软件。主机到主机层呢有两种代表性的协议。一种叫tcp提供一个可靠的服务，而UDP提供一个尽力而为的服务。那么我们上层的应用程序根据我们的需求，选择四层对应的协议。比如说你的应用层程序可能对可靠性的要求比较高，要求你的分组呢你的会话呢是可靠的，那么这个时候呢你可能会挑选TCP作为四层的协议。那有些应用呢可能是不需要那么可靠，就希望数据呢是尽力而为的传输，那么可能在四层对应的就是UDP协议。当然并不是说所有上层的协议都是需要用到这两个协议，他只是提供了一种端到端的一种保障。那么TCP呢我们看一下,tcp呢叫做传输控制协议，他提供了一个面向连接的服务，而udp是无连接的服务。所谓的面向连接什么意思呢？你比如说我们打电话，我拨你的号码，然后拨通了，你的铃声响了，你把电话拿起来你没喂一声，这样的话呢其实我们再通话之前就通过这种拨号啊接听啊这样的一个动作来建立了一个连接，在此基础之上呢，我们再去通话。这叫做面向连接的方式。那什么叫无连接呢？就相当于我们的对讲机，我吼两句，你有没有听到我不敢保证，而且对讲机的话呢，我们两个之间的对话，其实不必要事先建立起来一个连接，这叫做无连接的服务。OK！TCP是一种可靠的传输，我要求基于TCP传输的每一个数据包呢都是一种可靠的传输，当我发现到某一个数据包有可能在传输的过程中被丢失了，那我可能会进行重传，OK。而UDP呢是一种不可靠的或者叫尽力而为的传输，就是我这个数据包不管三七二十一我就给你扔出去，至于说你能否收到，我不管。尽力而为的传输。好。像比如说有一些语音啊视频啊这样的应用呢可能用到这个UDP四层的协议，视频流，DNS等等。使用TCP协议的应用比如web浏览器，实际上就是http咯。电子邮件等等。ftp啊等等。这是tcp和udp的对比，那么接下去呢我们要分别来看一下tcp和udp的报文格式，那么我们前面说到了，对于我们数据传输来讲呢其实，这个是我们的荷载，然后这个荷载往下送呢会比如说到了第四层，第四层我可能会给他添加一个layer4，第四层的一个包头。然后到了第三层可能又会给他写一个第三层的包头。这一块呢毫无疑问就是IP的头部了啊，再往下到了第二层呢会写一个二层的数据帧的帧头，好，以太网的环境下呢这个数据帧的帧头就是以太网的头部，也就是说我们这个payload他会被每一个层次呢可能增加一个上一次呢我们打的一个比方叫信封，相当于就是一个信封的概念对吧。我写一封信，这是我信的一个实体，然后我套一个信封上面的第四层的头，我再套一个信封这是第三层的头，再来套一个信封这是第二层的头，每一个层次的这个信封上面呢我会写上相应的内容，就相当于我们在比如说你在信封上会写地址，从哪来的，到哪儿去的，对吧。在我们的数据网络里边儿这些协议其实也是一样的，不管是四层三层二层都会写上相应的内容，在这儿的话我们把他叫为字段。英文叫做field。那么其实呢他要比我们在信封上填写简单的两个源和目的地要复杂得多。每一个头部呢可能会增加许许多多的字段，你比如说每一个字段的话呢都会有他自己的特定的用途，这个呢非常关键。在刚开始学的时候，我们可能没有必要去记每一个字段他的含义是什么他的作用是什么，但是我相信大家如果把后续学了呢迟早是要用到的，我希望大家记住我的话，其实刚开始呢没有必要，否则的话你会非常痛苦非常晕的啊。好，那么在这一块呢其实，只是一个形象化的比喻，其实的话他更像我在这儿画的这种样式，在做一个抓包的时候，抓包就是把这个数据给他抓下来，就相当于比如我说句话，A跟B之间我聊天，那么我把这整个话把他窃听下来，在数据网络里边叫抓包。因为我们数据网络当中呢不管是你的协议还是我们的实际的业务，底层全是一些报文在传递，可能是一个数据帧的形态，那么只要是数据帧，你肯定是由各个字段构成的，比如说帧头有很多字段，这个IP的头呢很多字段，第四层呢很多字段，最后是数据的分组。他其实呢地下最底层的一种表现形态就是一对对的1010...但是呢我们可以把这个1010...给他还原，因为这个字段都是有个格式的都是有固定的格式的固定的长度的。每一个字段，而且这些长度都是大家公认的一个约定，是个标准化的文件来定义的。那么这样的话呢，其实我就可以把这些信息捕捉下来，然后给他还原成我们人类能读懂的这种数据的形态。这就是抓包。 然后呢我们要在这个报文的层面上去分析每一个数据他的一个内容，当你真正的读懂了每一数据网络的数据通信的协议他里头的一些报文，相关重点字段，你如果能读懂的话，你才真正的了解了数据通信的真谛。OK。那么这里说到呢我们TCP报文的格式，在这一块呢其实就是我们上层的数据payload，前面这一部分就是TCP的头部了。就相当于那个信封有木有。好。那么，在这一块呢其实他在底层的时候是这样的，成S曲线，到最后就到我们的数据了。在这里我wishing为了方便展示，所以我把胶片就携程这样。32位。我们来TCP协议有哪些字段要提呢？我们是有源端口号有目的端口号，那么这个源和目的端口号有什么作用。 这里先给大家来讲一下。打个比方，假设你有一栋房子，这个房子呢我们开了一个超市，在超市还小的时候可能只需要一个门就可以了，那这些人要来超市买东西，是不是首先得要知道我们超市的一个地址啊，那么知道这个地址我们就能找到这个超市，就能进去买东西。但是有一个问题就是，你超时现在的规模小啊，当我们超市的规模变得越来越大的时候，你想你可能有卖生活用品的有卖食品的有卖药品的这么大个超市这么大个规模你就只有一个门让人家进，你没法区分这些人是来买什么的，这不是乱套了吗对不对，光有地址还不够，我来开几个门，开多个们，每一个门呢有特定的编号，我规定10号门就是卖生活用品的，11号门就是卖食物的，12门可能来的人比较少一点，卖成人用品，13门可能是卖体育用品的，我这么来规定，那么如果你要来买生活用品呢，你就找到我这个地址到10号门来买，如果你要买食物呢你就找到我这个地址到11号门买，这就是端口号。随意端口号呢是有个数值来标示的，他的范围是1-65535,区间，但是呢我们有定义，1-1024之间呢作为一个保留的端口号，就是前面我们所说的well-known，众所周知的，是保留给一些我们众所周知的一些应用程序使用的，比如说http呢就是tcp的80端口。这些呢都是大家共同约定的。1024以后呢就是你可以用来自定义的端口号，比如说你有一个进程，你在本地开了一个端口号，自定义的是2020，这是你自己定义的对吧。那么2020这个服务你一旦开启，你这个节点就会去侦听tcp的2020端口，当有数据要过来访问你的应用的时候，那就把它送到你这个应用程序。所以为什么我们在访问一些服务器的时候，你可能会使用10.1.41.1，这是IP地址对吧，加一个冒号80或者冒号8080（10.1.41.1：80），那么这个时候呢，实际上我要去访问这台服务器的时候，这个IP地址的TCP80端口，这里其实就是HTTP的80端口。有时候我们通俗的来讲称为web，就是一些网页的应用对吧。当然可能你会有经验，在我们上网的时候，你浏览器里面输地址的时候，我可能直接输的就是域名，而且我也不去输后面这个端口号，其实端口号这一块呢，当你没有加这个端口号的时候，我们就认为就是缺省的80端口，我们再一个呢你可能会用域名huawei.com来访问我的华为的服务器，而不是输入地址，这个其实上是一种什么呢，是一种域名服务，我们在浏览器里边输这个东西，就是为了我们人为方便记忆，但是我们的PC底层他不认识你这个东西，他只认识IP地址对吧，所以还需要有个东西，帮我们把这个huawei.com解析成IP。这就是DNS服务。OK！这是连带的讲一些基本概念哈~~好那么接下去，有源端口有目的端口，就是我们两个之间要通信，如果是一个TCP的会话，或者说UDP的会话，那么我可能会有多扇门多个窗，现在我跟你的会话呢我是用的这个门跟你的这个门来通信，那我这里有个端口号是源端口号，这里有个端口号是目的端口号，这时候你是服务端，我是客户端，好，再往下呢有一个，叫做sequence number和AC number一个是序列号，一个是确认号，这两个东西呢是用来保障用来实现我们的TCP可靠传输的一个根本，首先是确保数据包是以段发出去的，同时呢我要确保对端收到我的每一个TCP的sequence，这个时候我就必须要有这两个东西来帮我搞定。这个后面我们会讲。除此之外呢还有，窗口的大小，活动窗口的一个值，还有校验荷，还有控制的位，这个控制位呢他一共有6个比特，其实是123456写上二进制呢就是6个比特，每个比特有1和0两种选择，那么如果都是0，每一位都有特殊的含义，特殊的用途，OK，当我这一位唯一的时候，我们把这个行为称为置1.当某一位置1的时候，他会表示特定的用途，这个大家一定要记住哈~~后面会介绍几个重要的控制位。那么相比TCP呢，UDP报文格式精简很多，他只有四个字段，源端口号，目的端口号，和长度以及校验荷，没有其他的内容了，所以为什么说UDP呢第一个不可靠，再一个他尽力而为的传输，这是因为其实在字段上，在底层已经决定了他这个特性，好~~那么接下去呢关于TCP重要的知识点，我们来做个介绍。首先呢就是TCP的连接建立，我们前面说了，TCP他是一个面向连接的服务，也就是说任何一个基于TCP的应用，你在应用正式开始传输数据之前呢你都需要建立一个TCP的会话，然后基于这个会话你来传输数据，OK！那么这个会话的建立过程，其实就是这样的，比如说A跟B呢要建立一个会话，B是服务端，A是客户端，我来向你发起，发起的时候呢重点关注两三个字段，第一个字段是seq序列号，第二个是ack确认号，第三个是控制位。这是我们要关注的三个字段，好我们首先看一下哈~~A呢他发了一个TCP的握手信息给B，这个TCP的握手信息呢序列号是0，表示呢我这是一个握手的消息，序列号是什么呢，表示我发出去的分组序列号是0，，握手消息是TCP的第一个消息，往后呢是一直往上累加的，那么确认号是ACK号呢是用来确认对端的序列号的，用来告诉对方说，我收到你的号码啦~我们举个简单的例子，比如说甲和乙，在聊天，他们两个都有类似于那种强迫症，A说我要说话了啊，我说的第一句话是中午吃什么呢？那么他的第一句话是他的序列号是吧，那么当乙在听到这句话的时候呢，他要回一句话，乙说，我要说我自己的第三句话了啊，而且我已经收到你的第一句话了，理解吧。ACK十确定甲的序列号的。那么当甲听到乙说了这句话的时候呢，他就会知道说，他确认了我的1，所以他收到了我的序列号为0的数据了。通过这种方式呢，我们来确保一种可靠的传输（就是说自己的话之前确认下收到对端发来的话啦~~）这个意思。所以我发出去的第一个TCP消息的序列号是0.然后呢控制位当中有个比较重要的就是SYN，同步位，SYN位被置位了啊，就是SYN位那一位的值是1.发过去了。B收到以后呢，诶哥们你要跟我来建TCP的握手，那这个时候呢其实这个TCP消息里边还包含了一些其他字段哈~~比如说有目的TCP端口号，那么B收到这个消息他要看一下比如他来访问我23端口那么我23端口是否有开，开没开呢，如果开了的话呢我才能接受，不开呢我这个TCP消息我就直接忽略了对吧。好他发现有开，怎么办呢？给他回一个，我给他回的时候呢，序列号是0，为什么呢？这是我的第一个消息，所以这是用的我自己的序列号是吧，那么ACK是1，1是用来确认客户端的序列号0的，那么这个1发给A，他有两个目的，第一个目的是告诉他我收到了他的0，第二个目的呢告诉他我请求你下一个序列号为1的数据，这个意思，OK。好了那么控制位当中呢，他有两个，一个SYN位一个ACK位。那么最后呢，A收到B回复的TCP消息呢再给她回一个，这个时候序列号是1，ACK是1用来确认B的序列号的，然后控制位是ACK，置位。这样的话呢他就完成了一个三次握手的一个过程，完全可以用两个陌生人打招呼的这种方式来打比方。所以我觉得数据通信的话呢其实有些人感觉学起来很枯燥，我个人感觉啊这个应该来讲是学习方法的问题，如果你真的，其实像技术啊都是取之于生活用之于生活的对吧。我们一些枯燥的东西，其实可用一种类比法，把他给我们实际生活中的一些例子做一个结合，这样呢一方面你个人容易理解，第二个呢个人容易记忆。这样是非常关键的。当然对于TCP来讲呢他的断开就麻烦一点，有四次握手。就是AB的连接已经建立起来了，AB呢在不断的发送数据，那发送数据的时候，要重点关注下序列号和确认号。比如说我发出去的序列号是100，那么b回复序列号300是他自己的序列号，ack101是用来确认对端的100的。我们现在忽略TCP里头报文的长度哈~~，当这个时刻（上面是传数据的），下面呢A决定要和B断开TCP连接了，那么这个时候呢由A发起一个TCP的一个消息，这个TCP消息他的控制位里边有两个位是置位，一个是fin（finish）位，B收到这个消息的时候，他就知道这个哥们要跟我断开了，他就首先给他回一个ACK，用来确认他这个分组的，然后再来给他回一个两个置位，一个FIN位，一个ACK位。来告诉他说我要跟你拆了啊，最后A就给他来一个ACK，宣告我们TCp连接的拆除。OK。这是TCP的四次握手。那么关于TCP和UDP的端口号相信大家已经没有问题了，我已经讲的非常透彻了。关于序列号和确认号刚才也和大家讲过了啊，第四个知识点呢是TCP滑动窗口机制。打个比方吧，你想我们TCP是一种可靠的传输方式，可靠传输方式呢那我们刚才所打的比方，甲乙，如果两个人真的有强迫症的话，他说一句话我回一句话，而且我们说的每一句话里头都还要对他的上一句话做确认，这样去聊天的话效率就太低了，怎么办呢？有木有这种可能性，比如说，他这个人的性格阴晴不定，这个时刻呢他不忙一次性可能可以听四句话，下一个时刻呢可能会比较忙，可能一次性只能听一句话，那这个时候呢，甲发数据的时候能不能灵活一点，比如说，我一次性的发三个数据出去，然后呢乙对这三个数据进行确认，那么当一个时候呢可能乙接受程度发生变化了，他只能听进去一句话，乙能不能通知甲告诉他，你现在不要一次性说三句话啊我听不到，你说一句吧，然后甲再说一句。下一个时刻呢可能乙又闲了啊，他可能可以听六句话啦~~那乙再告诉甲说我确认你这句话了，同时你下一次你说6句吧。。那么甲呢一次性发6句过去，这就是叫做滑动窗口的机制。看这个图呢我觉得大家就应该好理解了。我们前面已经讲过了序列号和确认号的作用，现在我们的观察点呢是在B设备上，我们假设B呢，他有一个缓冲区。是三个单位的缓冲区，现在是空的，当AB在建立TCP的三次握手的时候，B作为数据的接收方，他有义务呢向A通告一个值，这个值呢叫做窗口值	win，当前我三个单元的值都是空的，所以呢我给你通告的值是3，那么当TCP三次握手建立完成了之后呢，A就知道B你的承受范围是3，所以意味着什么呢，意味着我最多一次性发送三个数据给你，而不需要你做确认，我不需要说发一个你确认一个发一个你确认一个，我现在知道了你的这个承受能力是3，所以我就一次性给你发三个，然后我再等你的确认，这个意思。好所以这个时候呢。A呢就会123发三个数据出去，序列号分别是101.102.103，这个win是他自己的窗口大小，这个我们不管，我们只管B的。是我把我的窗口大小告诉你，你按照我的窗口大小来给我发数据，这个逻辑哈~~所以B的三个缓冲单元瞬间被A来的三个数据给填满，我们这里就简单打个类比哈~~就假设就是3个单元哈~~填满了以后呢，接着有一个数据呢被B的CPU拿走去处理，处理完了不就有个空缺吗？这个时候呢B就要把103的做一个确认，B就发回一个TCP消息给A,同时ACK填的104，是用来确认103的同时请求下一个104的数据，我们现在假设TCP里边是没有东西的哈~~同时控制位是ACK置位，这样A受到这个消息之后呢。注意B通告给A的TCP消息呢窗口值变了啊，不是原来的3了而是1，因为现在他只有一个空闲了，这个缓冲区单元。所以A在收到这样一个数据的时候他就知道B的窗口发生变化了，那么他呢就会一次性的发一个数据出去，然后还要等这个B处理了这个数据之后呢，他才能继续给他传。所以也许呢下一个时刻呢，他又有两个空闲的缓冲区单元，B再发回给A时候这个窗口值就是2了，这个窗口值呢可能一直在变化的，根据B的这个缓冲区的一个空闲大小来不断发生变化的。所以才叫做滑动窗口机制。那么讲完了主机到主机层，接下来我们看因特网层。那么因特网层呢也叫Internet层，他的作用呢很多，我们这里只是列举了几个，比如说第一个他有定义我们数据分组的格式，我们说IP网络IP网络，实际IP网络就是每一时刻在我们网线上光纤上介质上都有我们数据的传输，那么这个数据他肯定要有个固定的格式，全球通用的格式，就是IP来定义固定的格式是吧~~所以因特网层重点的重点IP协议。除此之外还有其他协议，像ICMP、IGMP、RARP、ARP等等这样的三层协议，OK~~好我们来看一下IP报文的格式，我们的这一块儿其实就是上层数据，应用层的数据下来之后不是到了第四层吗，第四层可能根据需要，基于TCP的就会加上TCP的头部，如果基于UDP的那就会加上UDP的头部，如果是都不用那么就没有第四层的头了，是可以的。总而言之呢这一部分data，然后我们在这个基础之上呢加上IP的头部，当然我们这里讲的是IP的版本4也就是IPV4.目前因特网的主流。大家现在用的电脑，主流的IP版本是IPV4，但是IPV6呢是下一代的IP。虽然呼声很高。喊了这么多年了，至少在五六年前我就听说过，我们一直在喊的，说这个IPV6马上就要替代IPV4了，一直到今天还没有看到一个大规模的商用，这个当然是一个漫长的历史过程，这也是无法避免的，那么IP的报文格式呢,来看一下哈~~这个有点像IP的信封哈，那么有版本，当然是4了，这个IP头部的长度，然后是报文的总长度，identification是用来做分片的，flags一些用于置位的标志，TTL（time to live）值是用来防环的，比如说我们一个网络，假设是由路由器来构成的，他就是这样一个网络，而且他存在路由的这样的一个环路。
